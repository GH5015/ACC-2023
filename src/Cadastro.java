import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.net.URI;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author User
 */
public class Cadastro extends javax.swing.JFrame {

    /**
     * Creates new form Cadastro
     */
    
    private static final String DB_URL = "jdbc:mysql://localhost:3306/dom_cafe";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "";
    
    int xmouse, ymouse;
    
    public Cadastro() {
        initComponents();
        
        exitButton.setMnemonic('Q');
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        user = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        exitButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        passwordConfirm = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        signButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CADASTRAR - DOM CAFÉ");
        setLocationByPlatform(true);
        setUndecorated(true);
        setResizable(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/domcafe.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jLabel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLabel1KeyPressed(evt);
            }
        });
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(548, 0, -1, 460));

        jPanel2.setBackground(new java.awt.Color(107, 52, 31));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Roboto Thin", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("CADASTRAR-SE");
        jLabel2.setToolTipText("");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        user.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userActionPerformed(evt);
            }
        });
        user.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(245, 245, 245));
        jLabel3.setText("Usuário:");

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(245, 245, 245));
        jLabel4.setText("Senha:");

        password.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });
        password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordKeyPressed(evt);
            }
        });

        exitButton.setBackground(new java.awt.Color(204, 0, 0));
        exitButton.setFont(new java.awt.Font("Roboto Black", 0, 14)); // NOI18N
        exitButton.setText("SAIR");
        exitButton.setBorder(null);
        exitButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                exitButtonMouseDragged(evt);
            }
        });
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exitButtonMousePressed(evt);
            }
        });
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(245, 245, 245));
        jLabel5.setText("Confirmar Senha:");

        passwordConfirm.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        passwordConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordConfirmActionPerformed(evt);
            }
        });
        passwordConfirm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordConfirmKeyPressed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(245, 245, 245));
        jLabel6.setText("Primeiro Nome:");

        name.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });
        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameKeyPressed(evt);
            }
        });

        signButton.setFont(new java.awt.Font("Roboto Black", 0, 14)); // NOI18N
        signButton.setText("CADASTRAR");
        signButton.setBorder(null);
        signButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        signButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                signButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                signButtonMouseExited(evt);
            }
        });
        signButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(user))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(password, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(passwordConfirm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 67, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(signButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(376, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(307, Short.MAX_VALUE)
                    .addComponent(signButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(118, 118, 118)))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 460));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
          dispose();
        
    }//GEN-LAST:event_exitButtonActionPerformed

    private void passwordConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordConfirmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordConfirmActionPerformed

    private void userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void exitButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseEntered
        // TODO add your handling code here:
        exitButton.setBackground(new Color(139, 0, 0));
    }//GEN-LAST:event_exitButtonMouseEntered

    private void exitButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseExited
        // TODO add your handling code here:
        exitButton.setBackground(new Color(204,0,0));
    }//GEN-LAST:event_exitButtonMouseExited

    private void signButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signButtonMouseEntered
        // TODO add your handling code here:
        signButton.setBackground(new Color(188, 184, 138));
    }//GEN-LAST:event_signButtonMouseEntered

    private void signButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signButtonMouseExited
        // TODO add your handling code here:
        signButton.setBackground(new Color(255,255,255));

    }//GEN-LAST:event_signButtonMouseExited

    private void signButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signButtonActionPerformed
        // TODO add your handling code here:
        if (user.getText()!=null &&
            !user.getText().isEmpty() &&
            password.getText()!=null &&
            !password.getText().isEmpty() &&
            name.getText()!=null &&
            !name.getText().isEmpty() &&
            passwordConfirm.getText()!=null &&
            !passwordConfirm.getText().isEmpty() &&passwordConfirm.getText().equals(password.getText())){ 
            
        String userName = user.getText();
        String completeName = name.getText();
        String password1 = String.valueOf(password.getPassword());
        
        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yy");
        String formattedDate = currentDate.format(formatter);
        
        LocalTime now = LocalTime.now();
        
            // Formate o horário como você desejar
            DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("HH:mm:ss");
            String formattedTime = now.format(formatter2);
        
               
        try {
                    Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                    PreparedStatement statement = connection.prepareStatement("INSERT INTO usuário (nomeUsuário, senha, nomeCompletoUsuário) VALUES (?, ?, ?)");

                    statement.setString(1, userName);
                    statement.setString(2, password1); // Warning: passwords should be hashed and salted
                    statement.setString(3, completeName);
                    
                    PreparedStatement statement2 = connection.prepareStatement("INSERT INTO histórico (nome, descrição, data, horário) VALUES (?, ?, ?, ?)");

                    statement2.setString(1, "Usuário");
                    statement2.setString(2, userName);
                    statement2.setString(3, formattedDate);
                    statement2.setString(4, formattedTime);

                    int rowsInserted = statement.executeUpdate();
                    int rowsInserted2 = statement2.executeUpdate();
                    
                    JOptionPane.showMessageDialog(exitButton, "Usuário cadastrado com sucesso!");
                    dispose();

                    // Close the resources
                    statement.close();
                    statement2.close();
                    connection.close();

                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(exitButton, "Erro conectando com a database.", "Aviso", JOptionPane.WARNING_MESSAGE);
                }}
        
        else{
            JOptionPane.showMessageDialog(exitButton, "Verifique as informações", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_signButtonActionPerformed

    private void exitButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMousePressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_exitButtonMousePressed

    private void exitButtonMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseDragged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_exitButtonMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        xmouse = evt.getX();
        ymouse = evt.getY();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x-xmouse,y-ymouse);
    }//GEN-LAST:event_formMouseDragged

    private void nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (user.getText()!=null &&
            !user.getText().isEmpty() &&
            password.getText()!=null &&
            !password.getText().isEmpty() &&
            name.getText()!=null &&
            !name.getText().isEmpty() &&
            passwordConfirm.getText()!=null &&
            !passwordConfirm.getText().isEmpty() &&passwordConfirm.getText().equals(password.getText())){ 
            
        String userName = user.getText();
        String completeName = name.getText();
        String password1 = String.valueOf(password.getPassword());
        
               
        try {
                    Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                    PreparedStatement statement = connection.prepareStatement("INSERT INTO usuário (nomeUsuário, senha, nomeCompletoUsuário) VALUES (?, ?, ?)");

                    statement.setString(1, userName);
                    statement.setString(2, password1); // Warning: passwords should be hashed and salted
                    statement.setString(3, completeName);

                    int rowsInserted = statement.executeUpdate();
                    
                    JOptionPane.showMessageDialog(exitButton, "Usuário cadastrado com sucesso!");
                    dispose();

                    // Close the resources
                    statement.close();
                    connection.close();

                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(exitButton, "Erro conectando com a database.", "Aviso", JOptionPane.WARNING_MESSAGE);
                }}
        
        else{
            JOptionPane.showMessageDialog(exitButton, "Verifique as informações", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        }
    }//GEN-LAST:event_nameKeyPressed

    private void passwordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (user.getText()!=null &&
            !user.getText().isEmpty() &&
            password.getText()!=null &&
            !password.getText().isEmpty() &&
            name.getText()!=null &&
            !name.getText().isEmpty() &&
            passwordConfirm.getText()!=null &&
            !passwordConfirm.getText().isEmpty() &&passwordConfirm.getText().equals(password.getText())){ 
            
        String userName = user.getText();
        String completeName = name.getText();
        String password1 = String.valueOf(password.getPassword());
        
               
        try {
                    Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                    PreparedStatement statement = connection.prepareStatement("INSERT INTO usuário (nomeUsuário, senha, nomeCompletoUsuário) VALUES (?, ?, ?)");

                    statement.setString(1, userName);
                    statement.setString(2, password1); // Warning: passwords should be hashed and salted
                    statement.setString(3, completeName);

                    int rowsInserted = statement.executeUpdate();
                    
                    JOptionPane.showMessageDialog(exitButton, "Usuário cadastrado com sucesso!");
                    dispose();

                    // Close the resources
                    statement.close();
                    connection.close();

                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(exitButton, "Erro conectando com a database.", "Aviso", JOptionPane.WARNING_MESSAGE);
                }}
        
        else{
            JOptionPane.showMessageDialog(exitButton, "Verifique as informações", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        }
    }//GEN-LAST:event_passwordKeyPressed

    private void userKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (user.getText()!=null &&
            !user.getText().isEmpty() &&
            password.getText()!=null &&
            !password.getText().isEmpty() &&
            name.getText()!=null &&
            !name.getText().isEmpty() &&
            passwordConfirm.getText()!=null &&
            !passwordConfirm.getText().isEmpty() &&passwordConfirm.getText().equals(password.getText())){ 
            
        String userName = user.getText();
        String completeName = name.getText();
        String password1 = String.valueOf(password.getPassword());
        
               
        try {
                    Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                    PreparedStatement statement = connection.prepareStatement("INSERT INTO usuário (nomeUsuário, senha, nomeCompletoUsuário) VALUES (?, ?, ?)");

                    statement.setString(1, userName);
                    statement.setString(2, password1); // Warning: passwords should be hashed and salted
                    statement.setString(3, completeName);

                    int rowsInserted = statement.executeUpdate();
                    
                    JOptionPane.showMessageDialog(exitButton, "Usuário cadastrado com sucesso!");
                    dispose();

                    // Close the resources
                    statement.close();
                    connection.close();

                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(exitButton, "Erro conectando com a database.", "Aviso", JOptionPane.WARNING_MESSAGE);
                }}
        
        else{
            JOptionPane.showMessageDialog(exitButton, "Verifique as informações", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        }
    }//GEN-LAST:event_userKeyPressed

    private void passwordConfirmKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordConfirmKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (user.getText()!=null &&
            !user.getText().isEmpty() &&
            password.getText()!=null &&
            !password.getText().isEmpty() &&
            name.getText()!=null &&
            !name.getText().isEmpty() &&
            passwordConfirm.getText()!=null &&
            !passwordConfirm.getText().isEmpty() &&passwordConfirm.getText().equals(password.getText())){ 
            
        String userName = user.getText();
        String completeName = name.getText();
        String password1 = String.valueOf(password.getPassword());
        
               
        try {
                    Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                    PreparedStatement statement = connection.prepareStatement("INSERT INTO usuário (nomeUsuário, senha, nomeCompletoUsuário) VALUES (?, ?, ?)");

                    statement.setString(1, userName);
                    statement.setString(2, password1); // Warning: passwords should be hashed and salted
                    statement.setString(3, completeName);

                    int rowsInserted = statement.executeUpdate();
                    
                    JOptionPane.showMessageDialog(exitButton, "Usuário cadastrado com sucesso!");
                    dispose();

                    // Close the resources
                    statement.close();
                    connection.close();

                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(exitButton, "Erro conectando com a database.", "Aviso", JOptionPane.WARNING_MESSAGE);
                }}
        
        else{
            JOptionPane.showMessageDialog(exitButton, "Verifique as informações", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        }
    }//GEN-LAST:event_passwordConfirmKeyPressed

    private void jLabel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1KeyPressed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
         if(Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI("https://domcafe.netlify.app/"));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jLabel1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cadastro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField name;
    private javax.swing.JPasswordField password;
    private javax.swing.JPasswordField passwordConfirm;
    private javax.swing.JButton signButton;
    private javax.swing.JTextField user;
    // End of variables declaration//GEN-END:variables
}
